#include <linux/kernel.h>
#include <linux/pid.h>
#include <linux/module.h>
#include <linux/syscalls.h>
#include <linux/sched.h>
#include <linux/list.h>
#include <asm/current.h>
#include <asm/errno.h>    
#include <asm/uaccess.h>

typedef struct ancestry {
  pid_t ancestors[10];
  pid_t siblings[100];
  pid_t children[100];
} ancestry;

struct ancestry kinfo;
struct pid *pid_struct;
struct task_struct *task;

unsigned long **sys_call_table;

asmlinkage long (*ref_sys_cs3013_syscall1)(void);

asmlinkage long (*ref_sys_cs3013_syscall2)(void);

asmlinkage long (*ref_sys_open)(const char* pathname, int flags, umode_t mode); // reference to old sys_open

asmlinkage long (*ref_sys_close)(int fd); // reference to old sys_close

asmlinkage long (*ref_sys_read)(unsigned int fd, void* bf, size_t count); // reference to old sys_read

/** Give cs3013_syscall1 a more menacing message */
asmlinkage long new_sys_cs3013_syscall1(void) {
  printk(KERN_INFO "\"'Hello World?!' More like 'Goodbye World!' EXTERMINATE!\" -- Dalek\n");
  return 0;
}

/** Add procAncestry functionality to cs3013_syscall2: traverse process family tree until parentless node reached.
 * In particular, the information provided here must be accessible by the caller of this function, to enable 
 * user-kernel space communication.
 *
 * New parameters added, both must be allocated in user space:
 * target_pid : Pointer to some PID
 * response : Pointer to struct containing the PIDs of target_pid's children, siblings, parents, and grandparents.
 */  
asmlinkage long new_sys_cs3013_syscall2(unsigned short *target_pid, struct ancestry *response) {

  // Check validity of target_pid using copy_from_user()
  unsigned short kern_copy;
  if (copy_from_user(&kern_copy, target_pid, sizeof(target_pid))) {
    return EFAULT;
  } return 0;
  /*
  // First find task_struct for target process using its pid
  pid_struct = find_get_pid(kern_copy);
  task = pid_task(pid_struct, PIDTYPE_PID);
  if (task == NULL)
    return -1;
  else
    printk(KERN_INFO "Located task_struct for process %d\n",kern_copy);
  

  // Now populate kinfo->children using list.h macros (and if any children)
  if (!list_empty(&(task->children))) {
    printk(KERN_INFO "Child PID %d located\n", (list_entry(&(task->children), struct task_struct, children))->pid);
    kinfo.children[0] = (list_entry(&(task->children), struct task_struct, children))->pid;
  }
  
  // Pass accumulated kernel information back to caller and validate it was successful
  if (copy_to_user(response, &kinfo, sizeof(kinfo)))
    return EFAULT;

  printk(KERN_INFO "PID given by user %d : %d", current_uid().val, kern_copy);
  */
}

/** sys_open with an extra kernel message if a regular user uses it */
asmlinkage long new_sys_open(const char* pathname, int flags, umode_t mode) { 
  if (current_uid().val >= 1000) {  // if reg user
    printk(KERN_INFO "User %d is opening file %s\n",current_uid().val, pathname);
  }
  return (ref_sys_open)(pathname,flags,mode);
}

/** sys_close with an extra kernel message if a regular user uses it */
asmlinkage long new_sys_close(unsigned int fd) {
  if (current_uid().val >= 1000) { // if reg user
    printk(KERN_INFO "User %d is closing file desciptor: %d\n", current_uid().val,fd);
  }
  return (ref_sys_close)(fd);
}

/** sys_read with "virus protection" (still better than McAfee) */
asmlinkage long new_sys_read(unsigned int fd, void *bf, size_t count) {
  long read_call = (ref_sys_read)(fd,bf,count); // read file in order to fill buffer so we can check it for viruses
  
  if (read_call > 0) { // if >0 bytes read from file descriptor
    if (strstr(bf,"VIRUS") != NULL) { // if VIRUS found
      printk(KERN_INFO "User %d read from file desciptor %d, but that read contained malicious code!\n",current_uid().val,fd);
    }
  }
  return read_call;
}

static unsigned long **find_sys_call_table(void) {
  unsigned long int offset = PAGE_OFFSET;
  unsigned long **sct;
  
  while (offset < ULLONG_MAX) {
    sct = (unsigned long **)offset;

    if (sct[__NR_close] == (unsigned long *) sys_close) {
      printk(KERN_INFO "Interceptor: Found syscall table at address: 0x%02lX",
	     (unsigned long) sct);
      return sct;
    }
    
    offset += sizeof(void *);
  }
  
  return NULL;
}

static void disable_page_protection(void) {
  /*
    Control Register 0 (cr0) governs how the CPU operates.

    Bit #16, if set, prevents the CPU from writing to memory marked as
    read only. Well, our system call table meets that description.
    But, we can simply turn off this bit in cr0 to allow us to make
    changes. We read in the current value of the register (32 or 64
    bits wide), and AND that with a value where all bits are 0 except
    the 16th bit (using a negation operation), causing the write_cr0
    value to have the 16th bit cleared (with all other bits staying
    the same. We will thus be able to write to the protected memory.

    It's good to be the kernel!
  */
  write_cr0 (read_cr0 () & (~ 0x10000));
}

static void enable_page_protection(void) {
  /*
   See the above description for cr0. Here, we use an OR to set the 
   16th bit to re-enable write protection on the CPU.
  */
  write_cr0 (read_cr0 () | 0x10000);
}

static int __init interceptor_start(void) {
  /* Find the system call table */
  if(!(sys_call_table = find_sys_call_table())) {
    /* Well, that didn't work. 
       Cancel the module loading step. */
    return -1;
  }
  
  /* Store a copy of all the existing functions */

  ref_sys_cs3013_syscall1 = (void *)sys_call_table[__NR_cs3013_syscall1];
  ref_sys_cs3013_syscall2 = (void *)sys_call_table[__NR_cs3013_syscall2];
  ref_sys_open = (void *)sys_call_table[__NR_open];
  ref_sys_close = (void *)sys_call_table[__NR_close];
  ref_sys_read = (void *)sys_call_table[__NR_read];

  /* Replace the existing system calls */
  
  disable_page_protection();

  sys_call_table[__NR_cs3013_syscall1] = (unsigned long *)new_sys_cs3013_syscall1;
  sys_call_table[__NR_cs3013_syscall2] = (unsigned long *)new_sys_cs3013_syscall2;
  sys_call_table[__NR_open] = (unsigned long *)new_sys_open;
  sys_call_table[__NR_close] = (unsigned long *)new_sys_close;
  sys_call_table[__NR_read] = (unsigned long *)new_sys_read;
  
  enable_page_protection();
  
  /* And indicate the load was successful */
  printk(KERN_INFO "Loaded interceptors!\n");

  return 0;
}

static void __exit interceptor_end(void) {
  /* If we don't know what the syscall table is, don't bother. */
  if(!sys_call_table)
    return;
  
  /* Revert all system calls to what they were before we began. */
  disable_page_protection();

  sys_call_table[__NR_cs3013_syscall1] = (unsigned long *)ref_sys_cs3013_syscall1;
  sys_call_table[__NR_cs3013_syscall2] = (unsigned long *)ref_sys_cs3013_syscall2;  
  sys_call_table[__NR_open] = (unsigned long *)ref_sys_open;
  sys_call_table[__NR_close] = (unsigned long *)ref_sys_close;
  sys_call_table[__NR_read] = (unsigned long *)ref_sys_read;

  enable_page_protection();

  printk(KERN_INFO "Unloaded interceptors!\n");
}

MODULE_LICENSE("GPL");
module_init(interceptor_start);
module_exit(interceptor_end);
